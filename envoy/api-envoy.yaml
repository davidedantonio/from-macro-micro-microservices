static_resources:
  listeners:
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: 8000
      filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": "type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager"
              stat_prefix: http_proxy
              
              http_filters:
                - name: envoy.filters.http.jwt_authn
                  typed_config: 
                    "@type": "type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication"  
                    providers:
                      jwt_provider:
                        issuer: http://localhost:8000
                        local_jwks:
                          inline_string: '{"keys":[{"typ": "JWT", "kty":"oct","alg":"HS256","kid":"df","k":"VGgxczFzWTB1cjUzY3IzdA=="}]}'
                        forward: true
                        forward_payload_header: x-user
                    rules:
                      - match:
                          prefix: /api
                        requires:
                          provider_name: jwt_provider
                - name: envoy.filters.http.lua
                  typed_config:
                    "@type": type.googleapis.com/envoy.config.filter.http.lua.v2.Lua
                    inline_code: |
                      local alpha='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'
                      
                      function envoy_on_request(request_handle)
                        local token = request_handle:headers():get("x-user")
                        local user = parse(decodeBase64(token))
                      
                        request_handle:headers():add("x-user-profile", user.profile)
                      end
                      function envoy_on_response(response_handle)
                        body_size = response_handle:body():length()
                        response_handle:headers():add("response-body-size", tostring(body_size))
                      end
                      function decodeBase64(encoded)
                        local bitstr = ''
                        local decoded = ''
                        -- decode chars into bitstring
                        for i = 1, string.len(encoded) do
                            local offset, _ = string.find(alpha, string.sub(encoded, i, i))
                            if offset == nil then
                                error("Bad base64 character " .. string.sub(encoded, i, i))
                            end
                            bitstr = bitstr .. toBinaryString(offset-1)
                        end
                        -- decode bitstring back to chars
                        for i = 1, string.len(bitstr), 8 do
                            decoded = decoded .. string.char(fromBinaryString(string.sub(bitstr, i, i+7)))
                        end
                        return decoded
                      end

                      function toBinaryString(int)
                        if int > 64 then
                            error("Bad number "..int.." to convert to binary")
                        end        
                        local remaining = tonumber(int)
                        local bits = ''
                        for i = 5, 0, -1 do
                            local pow = 2 ^ i
                            if remaining >= pow then
                                bits = bits .. '1'
                                remaining = remaining - pow
                            else
                                bits = bits .. '0'
                            end
                        end
                        return bits
                      end

                      function fromBinaryString(bits)
                          return tonumber(bits, 2)
                      end
                      -- Expects the given pos to be the first character after the opening quote.
                      -- Returns val, pos; the returned pos is after the closing quote character.
                      function parse_str_val(str, pos, val)
                          val = val or ''
                          local early_end_error = 'End of input found while parsing string.'
                          if pos > #str then error(early_end_error) end
                          local c = str:sub(pos, pos)
                          if c == '"' then return val, pos + 1 end
                          if c ~= '\\' then return parse_str_val(str, pos + 1, val .. c) end
                          -- We must have a \ character.
                          local esc_map = {b = '\b', f = '\f', n = '\n', r = '\r', t = '\t'}
                          local nextc = str:sub(pos + 1, pos + 1)
                          if not nextc then error(early_end_error) end
                          return parse_str_val(str, pos + 2, val .. (esc_map[nextc] or nextc))
                      end
                      -- Returns val, pos; the returned pos is after the number's final character.
                      function parse_num_val(str, pos)
                          local num_str = str:match('^-?%d+%.?%d*[eE]?[+-]?%d*', pos)
                          local val = tonumber(num_str)
                          if not val then error('Error parsing number at position ' .. pos .. '.') end
                          return val, pos + #num_str
                      end
                      
                      function parse(str, pos, end_delim)
                          pos = pos or 1
                          if pos > #str then error('Reached unexpected end of input.') end
                          local pos = pos + #str:match('^%s*', pos) -- Skip whitespace.
                          local first = str:sub(pos, pos)
                          if first == '{' then -- Parse an object.
                              local obj, key, delim_found = {}, true, true
                              pos = pos + 1
                              while true do
                                  key, pos = parse(str, pos, '}')
                                  if key == nil then return obj, pos end
                                  if not delim_found then
                                      error('Comma missing between object items.')
                                  end
                                  pos = skip_delim(str, pos, ':', true) -- true -> error if missing.
                                  obj[key], pos = parse(str, pos)
                                  pos, delim_found = skip_delim(str, pos, ',')
                              end
                          elseif first == '[' then -- Parse an array.
                              local arr, val, delim_found = {}, true, true
                              pos = pos + 1
                              while true do
                                  val, pos = parse(str, pos, ']')
                                  if val == nil then return arr, pos end
                                  if not delim_found then
                                      error('Comma missing between array items.')
                                  end
                                  arr[#arr + 1] = val
                                  pos, delim_found = skip_delim(str, pos, ',')
                              end
                          elseif first == '"' then -- Parse a string.
                              return parse_str_val(str, pos + 1)
                          elseif first == '-' or first:match('%d') then -- Parse a number.
                              return parse_num_val(str, pos)
                          elseif first == end_delim then -- End of an object or array.
                              return nil, pos + 1
                          else -- Parse true, false, or null.
                              local literals = {
                                  ['true'] = true,
                                  ['false'] = false,
                                  ['null'] = json.null
                              }
                              for lit_str, lit_val in pairs(literals) do
                                  local lit_end = pos + #lit_str - 1
                                  if str:sub(pos, lit_end) == lit_str then
                                      return lit_val, lit_end + 1
                                  end
                              end
                              local pos_info_str = 'position ' .. pos .. ': ' ..
                                                      str:sub(pos, pos + 10)
                              error('Invalid json syntax starting at ' .. pos_info_str)
                          end
                      end
                      function skip_delim(str, pos, delim, err_if_missing)
                          pos = pos + #str:match('^%s*', pos)
                          if str:sub(pos, pos) ~= delim then
                              if err_if_missing then
                                  error('Expected ' .. delim .. ' near position ' .. pos)
                              end
                              return pos, false
                          end
                          return pos + 1, true
                      end
                - name: envoy.filters.http.router
                  typed_config: {}

              route_config:
                name: all
                virtual_hosts:
                  - name: all_backend
                    domains:
                      - "*"
                    routes:
                      - match: 
                          prefix: "/signin"
                        route:
                          cluster: auth
                      
                      - match: 
                          prefix: "/signup"
                        route:
                          cluster: auth
                      
                      - match: 
                          prefix: "/api/ticket"
                        route:
                          prefix_rewrite: "/"
                          cluster: tickets

                      - match:
                          prefix: "/api/user"
                          headers:
                            - name: "x-user-profile"
                              exact_match: "admin"
                        route:
                          prefix_rewrite: "/"
                          cluster: users-v2
                          
                      - match: 
                          prefix: "/api/user"
                        route:
                          prefix_rewrite: "/"
                          cluster: users
  clusters:
    - name: auth
      connect_timeout: 60s
      type: strict_dns
      lb_policy: round_robin
      load_assignment:
        cluster_name: auth
        endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: auth-service
                    port_value: 3001
    - name: tickets
      connect_timeout: 60s
      type: strict_dns
      lb_policy: round_robin
      load_assignment:
        cluster_name: tickets
        endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: tickets-service
                    port_value: 3002
    - name: users
      connect_timeout: 60s
      type: strict_dns
      lb_policy: round_robin
      load_assignment:
        cluster_name: users
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: users-service
                  port_value: 3003
    - name: users-v2
      connect_timeout: 60s
      type: strict_dns
      lb_policy: round_robin
      load_assignment:
        cluster_name: users-v2
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: users-service-v2
                  port_value: 3004